{# src/server/templates/components/result.jinja #}
<script>
    // Function to extract the display name (without prefixes/suffixes) from a tree item
    function getBaseNameFromTreeItem(element) {
        let nameElement = element.querySelector('span.name-text');
        let text = nameElement ? nameElement.textContent : '';
        return text.trim();
    }

    function toggleFile(element) {
        const patternInput = document.getElementById("pattern");
        if (!patternInput) return;
        const patternFiles = patternInput.value ? patternInput.value.split(",").map(item => item.trim()).filter(Boolean) : [];
        const lineElement = element.closest('div.tree-line');
        if (!lineElement) return;
        lineElement.classList.toggle('line-through');
        lineElement.classList.toggle('text-gray-500');
        // Use the FULL relative path for toggling patterns now
        const relativePath = lineElement.dataset.fullRelativePath; // <-- Use full path
        if (!relativePath || lineElement.dataset.depth === '0') return; // Skip root
        const patternToToggle = relativePath;
        const fileIndex = patternFiles.indexOf(patternToToggle);
        if (fileIndex !== -1) { patternFiles.splice(fileIndex, 1); }
        else { patternFiles.push(patternToToggle); }
        patternInput.value = patternFiles.filter(Boolean).join(", ");
    }

     // Function to copy the directory structure text (reconstructed)
    function copyDirectoryStructureText() {
        const container = document.getElementById('directory-structure-container');
        if (!container) return;
        let textToCopy = "";
        const lines = container.querySelectorAll('div.tree-line');
        lines.forEach((line, index) => {
            const prefixSpan = line.querySelector('span.prefix');
            const nameSpan = line.querySelector('span.name-text');
            const nameContent = line.querySelector('a')?.textContent || (nameSpan ? nameSpan.textContent : '');
            // Decode HTML entities like   from the prefix span AND replace vertical bars for text copy
            const prefixText = prefixSpan ? prefixSpan.innerHTML.replace(/ /g, ' ').replace(/│/g, '|') : '';
            if (index > 0) { textToCopy += '\n'; }
            textToCopy += prefixText + nameContent.trim();
        });
        const button = document.querySelector('[onclick="copyDirectoryStructureText()"]');
        if (!button) return;
        const originalContent = button.innerHTML;
        navigator.clipboard.writeText(textToCopy)
            .then(() => { button.innerHTML = 'Copied!'; setTimeout(() => { button.innerHTML = originalContent; }, 1000); })
            .catch(err => { button.innerHTML = 'Failed'; setTimeout(() => { button.innerHTML = originalContent; }, 1000); });
    }

    // Copy full digest function
    function copyFullDigest() {
        const treeContainer = document.getElementById('directory-structure-container');
        let treeText = "";
         if (treeContainer) {
             const lines = treeContainer.querySelectorAll('div.tree-line');
             lines.forEach((line, index) => {
                 const prefixSpan = line.querySelector('span.prefix');
                 const nameSpan = line.querySelector('span.name-text');
                 const nameContent = line.querySelector('a')?.textContent || (nameSpan ? nameSpan.textContent : '');
                 const prefixText = prefixSpan ? prefixSpan.innerHTML.replace(/ /g, ' ').replace(/│/g, '|') : ''; // Decode prefix
                  if (index > 0) { treeText += '\n'; }
                 treeText += prefixText + nameContent.trim();
             });
        }
        const filesContent = document.querySelector('.result-text').value;
        const fullDigest = `${treeText}\n\n${filesContent}`; // Combine directly
        const button = document.querySelector('[onclick="copyFullDigest()"]');
        const originalText = button.innerHTML;
        navigator.clipboard.writeText(fullDigest).then(() => {
            button.innerHTML = `<svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path></svg> Copied!`;
            setTimeout(() => { button.innerHTML = originalText; }, 2000);
        }).catch(err => { console.error('Failed to copy text: ', err); });
    }

</script>
{% if result %}
    <div class="mt-10" data-results>
        <div class="relative">
            <div class="w-full h-full absolute inset-0 bg-gray-900 rounded-xl translate-y-2 translate-x-2"></div>
            <div class="bg-[#fafafa] rounded-xl border-[3px] border-gray-900 p-6 relative z-20 space-y-6">
                <div class="grid grid-cols-1 md:grid-cols-12 gap-6">
                    {# Summary Column #}
                    <div class="md:col-span-5">
                         {# ... summary content ... #}
                         <div class="flex justify-between items-center mb-4 py-2">
                            <h3 class="text-lg font-bold text-gray-900">Summary</h3>
                        </div>
                        <div class="relative">
                            <div class="w-full h-full rounded bg-gray-900 translate-y-1 translate-x-1 absolute inset-0"></div>
                            <textarea class="w-full h-[160px] p-4 bg-[#fff4da] border-[3px] border-gray-900 rounded font-mono text-sm resize-none focus:outline-none relative z-10"
                                      readonly>{{ summary }}</textarea>
                        </div>
                        {# Download and Copy All Buttons #}
                        {% if ingest_id and encoded_download_filename %}
                            <div class="relative mt-4 inline-block group">
                                <div class="w-full h-full rounded bg-gray-900 translate-y-1 translate-x-1 absolute inset-0"></div>
                                <a href="/download/{{ ingest_id }}?filename={{ encoded_download_filename }}"
                                   class="inline-flex items-center px-4 py-2 bg-[#ffc480] border-[3px] border-gray-900 text-gray-900 rounded group-hover:-translate-y-px group-hover:-translate-x-px transition-transform relative z-10">
                                    <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4" /></svg>
                                    Download
                                </a>
                            </div>
                        {% endif %}
                         <div class="relative mt-4 inline-block group {% if ingest_id %}ml-4{% endif %}">
                            <div class="w-full h-full rounded bg-gray-900 translate-y-1 translate-x-1 absolute inset-0"></div>
                            <button onclick="copyFullDigest()"
                                    class="inline-flex items-center px-4 py-2 bg-[#ffc480] border-[3px] border-gray-900 text-gray-900 rounded group-hover:-translate-y-px group-hover:-translate-x-px transition-transform relative z-10">
                                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 5H6a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2v-1M8 5a2 2 0 002 2h2a2 2 0 002-2M8 5a2 2 0 012-2h2a2 2 0 012 2m0 0h2a2 2 0 012 2v3m2 4H10m0 0l3-3m-3 3l3 3" /></svg>
                                Copy all
                            </button>
                        </div>
                    </div>

                    {# --- Directory Structure Section (Uses Python Prefix & Full Path for Links) --- #}
                    <div class="md:col-span-7">
                        <div class="flex justify-between items-center mb-4">
                            <h3 class="text-lg font-bold text-gray-900">Directory Structure</h3>
                           {# ... copy button ... #}
                             <div class="relative group">
                                <div class="w-full h-full rounded bg-gray-900 translate-y-1 translate-x-1 absolute inset-0"></div>
                                <button onclick="copyDirectoryStructureText()"
                                        class="px-4 py-2 bg-[#ffc480] border-[3px] border-gray-900 text-gray-900 rounded group-hover:-translate-y-px group-hover:-translate-x-px transition-transform relative z-10 flex items-center gap-2">
                                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 5H6a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2v-1M8 5a2 2 0 002 2h2a2 2 0 002-2M8 5a2 2 0 012-2h2a2 2 0 012 2m0 0h2a2 2 0 012 2v3m2 4H10m0 0l3-3m-3 3l3 3" /></svg>
                                    Copy
                                </button>
                            </div>
                        </div>
                        <div class="relative">
                            <div class="w-full h-full rounded bg-gray-900 translate-y-1 translate-x-1 absolute inset-0"></div>
                            <div class="directory-structure w-full p-4 bg-[#fff4da] border-[3px] border-gray-900 rounded font-mono text-sm resize-y focus:outline-none relative z-10 h-[215px] overflow-auto whitespace-nowrap"
                                 id="directory-structure-container" readonly>
                                {%- for item in tree_data -%}
                                    {%- set name_html -%} {# Prepare name/link HTML #}
                                        {# Use item.full_relative_path for link construction #}
                                        {%- if not is_local_path and base_repo_url and item.type != 'SYMLINK' and item.full_relative_path -%}
                                            {%- set item_type = 'blob' if item.type == 'FILE' else 'tree' -%}
                                            {%- set effective_ref = repo_ref if repo_ref else 'main' -%}
                                            {# URL Encode the relative path for safety #}
                                            {%- set encoded_path = item.full_relative_path | urlencode -%}
                                            {%- set href = base_repo_url ~ '/' ~ item_type ~ '/' ~ effective_ref ~ '/' ~ encoded_path -%}
                                            <a href="{{ href }}" target="_blank" class="hover:underline" onclick="event.stopPropagation();"><span class="name-text">{{ item.name }}</span></a>
                                        {%- else -%}
                                            <span class="name-text">{{- item.name -}}</span>
                                        {%- endif -%}
                                    {%- endset -%}
                                    {# Render line, using the pre-calculated prefix #}
                                    <div class="tree-line {% if item.type == 'DIRECTORY' %}font-medium{% endif %} cursor-pointer hover:text-gray-500"
                                         onclick="toggleFile(this)"
                                         data-relative-path="{{ item.full_relative_path }}" {# Store full path for JS #}
                                         data-depth="{{ item.depth }}">
                                        {# Replace space with   in prefix for HTML rendering #}
                                        <span class="prefix">{{ item.prefix | replace(' ', ' ') | safe }}</span>{{- name_html | safe -}}
                                    </div>
                                {%- endfor -%}
                            </div>
                        </div>
                    </div>
                    {# --- END REFINED --- #}
                </div>
                 {# Files Content Section #}
                 <div>
                    {# ... files content section ... #}
                        <div class="flex justify-between items-center mb-4">
                        <h3 class="text-lg font-bold text-gray-900">Files Content</h3>
                       {# ... copy button ... #}
                         <div class="relative group">
                            <div class="w-full h-full rounded bg-gray-900 translate-y-1 translate-x-1 absolute inset-0"></div>
                            <button onclick="copyText('result-text')"
                                    class="px-4 py-2 bg-[#ffc480] border-[3px] border-gray-900 text-gray-900 rounded group-hover:-translate-y-px group-hover:-translate-x-px transition-transform relative z-10 flex items-center gap-2">
                                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 5H6a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2v-1M8 5a2 2 0 002 2h2a2 2 0 002-2M8 5a2 2 0 012-2h2a2 2 0 012 2m0 0h2a2 2 0 012 2v3m2 4H10m0 0l3-3m-3 3l3 3" /></svg>
                                Copy
                            </button>
                        </div>
                    </div>
                    <div class="relative">
                        <div class="w-full h-full rounded bg-gray-900 translate-y-1 translate-x-1 absolute inset-0"></div>
                        <textarea class="result-text w-full p-4 bg-[#fff4da] border-[3px] border-gray-900 rounded font-mono text-sm resize-y focus:outline-none relative z-10"
                                  style="min-height: {{ '600px' if content else 'calc(100vh - 800px)' }}"
                                  readonly>{{ content }}</textarea>
                    </div>
                 </div>
            </div>
        </div>
    </div>
{% endif %}