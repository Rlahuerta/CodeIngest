[tool.poetry]
name = "CodeIngest"
version = "0.0.0"
description = "CLI tool to analyze and create text dumps of codebases for LLMs"
authors = ["rilah <ricardolahuerta@gmail.com>"]
license = "MIT"
readme = "README.md"
#homepage = "https://gitingest.com"
repository = "https://github.com/Rlahuerta/CodeIngest"
keywords = ["Gitingest", "AI", "LLM", "Ingest", "Digest", "Context", "Prompt", "Git", "codebase", "automation", "Summarize"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Version Control :: Git",
    "Topic :: Utilities",
]
packages = [{ include = "CodeIngest", from = "src" }]
include = ["src/server/templates/*", "src/server/templates/components/*", "src/static/js/*", "src/static/*"] # Ensure templates and static files are included

[[tool.poetry.source]]
name = "PyPI"
priority = "primary"

[tool.poetry.dependencies]
python = ">=3.10,<4"
click = ">=8.0.0"
fastapi = { version = ">=0.109.1", extras = ["standard"] }
pydantic = "*"
slowapi = "*"
tiktoken = "*"
uvicorn = "^0.34.2"
tomli = { version = "*", python = "<3.11" } # Required for Python < 3.11 to parse TOML
poetry-dynamic-versioning = "^1.7.1"
typing-extensions = "^4.13.2"
httpcore = ">=1.0.0,<2.0.0"

[tool.poetry.group.dev.dependencies]
black = "*"
djlint = "^1.36.4"
pre-commit = "*"
pylint = "*"
pytest = "*"
pytest-asyncio = "*"
pytest-cov = "*"

[tool.poetry.scripts]
codeingest = "CodeIngest.cli:main"

[build-system]
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning>=1.0.0,<2.0.0"]
build-backend = "poetry_dynamic_versioning.backend"

# --- Tool configurations copied from original pyproject.toml ---
[tool.pylint]
# Pylint configuration remains the same
max-line-length = 119
disable = [
    "missing-module-docstring",
    "missing-class-docstring",
    "missing-function-docstring",
    "too-many-arguments",
    "too-many-positional-arguments",
    "too-many-locals",
    "too-few-public-methods",
    "broad-exception-caught",
    "duplicate-code",
    "fixme",
]
init-hook = '''
import sys; sys.path.append('src')
'''

[tool.pycln]
all = true

[tool.isort]
profile = "black"
line_length = 119
remove_redundant_aliases = true
float_to_top = true
order_by_type = true
filter_files = true

[tool.black]
line-length = 119

[tool.poetry-dynamic-versioning]
enable = true
style = "semver"
pattern  = "^(?P<base>\\d+\\.\\d+\\.\\d+)(-?((?P<stage>[a-zA-Z]+)\\.?(?P<revision>\\d+)?))?"

[tool.pytest.ini_options]
pythonpath = ["src"]
testpaths = ["tests/"]
python_files = "test_*.py"
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
python_classes = "Test*"
python_functions = "test_*"
addopts = "--cov=src/CodeIngest --cov-report=term-missing --cov-report=xml" # Add coverage flags

# --- ADD Coverage Configuration ---
[tool.coverage.run]
source = ["CodeIngest"] # Specify the package(s) to measure by import name
branch = true          # Enable branch coverage

[tool.coverage.paths]
source = [
    "src",              # Tell coverage that the source code is located in 'src'
    ".venv/lib/python*/site-packages", # Also check site-packages in venv
    ]

[tool.coverage.report]
show_missing = true     # Show line numbers of missing lines in terminal report
skip_covered = true     # Skip reporting on files with 100% coverage in terminal
# fail_under = 80       # Optional: uncomment to fail build if coverage is below 80%

[tool.coverage.html]
directory = "coverage_html_report" # Optional: specify directory for HTML report

